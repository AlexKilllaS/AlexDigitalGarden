{
	"nodes":[
		{"id":"1921ba466f613ee9","type":"text","text":"### Object\n1. hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。\n2. clone：实现Object 的 protected 方法clone()之外，还需要实现Cloneable 接口。\n3. 浅拷贝&深拷贝。","x":560,"y":-605,"width":480,"height":165},
		{"id":"685c835c0ee75a1f","type":"text","text":"## 基础知识点","x":-55,"y":-560,"width":190,"height":60},
		{"id":"acf9799a8e190c10","type":"text","text":"### 关键字\nfinal， static","x":238,"y":-716,"width":182,"height":60},
		{"id":"c991f3a08f51b38c","type":"text","text":"1. **抽象类 abstract：**\n\t抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。\n\n1. **接口 interface：**\n\t它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现（8之后支持default）。\n\t接口的成员(字段 + 方法)默认都是 public 的，并且不允许定义为 private 或者 protected。接口的字段默认都是 static 和 final 的。\n---\n**比较**\n- 从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。\n- 接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\n- 接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。","x":-271,"y":-120,"width":600,"height":260},
		{"id":"ff66d39fc32f52c6","type":"text","text":"### 注解\n- **Java自带的标准注解**，包括`@Override`、`@Deprecated`和`@SuppressWarnings`，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。\n- **元注解**，元注解是用于定义注解的注解，包括`@Retention`、`@Target`、`@Inherited`、`@Documented`，`@Retention`用于标明注解被保留的阶段，`@Target`用于标明注解使用的范围，`@Inherited`用于标明注解可继承，`@Documented`用于标明是否生成javadoc文档。\n- **自定义注解**，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。","x":435,"y":-210,"width":605,"height":310},
		{"id":"da6a277add5cd610","type":"text","text":"### 泛型\n类型擦除\n1. 为了保证类型安全，必要时插入强制类型转换代码。\n2. 无限制类型擦除：当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如`<T>`和`<?>`的类型参数都被替换为Object。 ![[Pasted image 20240612165536.png]]\n4. 有限制类型擦除：当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如`<T extends Number>`和`<? extends Number>`的类型参数被替换为`Number`，`<? super Number>`被替换为Object。\n编译期检查\n1. 因为擦除后，原始类型都会变为Object，接受任何引用类型。因此java编译器为：先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。\n2. 例子：\n\t```java\n\tArrayList<String> list1 = new ArrayList(); // 有检查\n\tArrayList list2 = new ArrayList<String>(); // 无检查\n```\n因为类型检查就是编译时完成的，new ArrayList()只是在内存中开辟了一个存储空间，可以存储任何类型对象，而真正涉及类型检查的是它的引用，因为我们是使用它引用list1来调用它的方法，比如说调用add方法，所以list1引用能完成泛型类型的检查。而引用list2没有使用泛型，所以不行。","x":-271,"y":-1296,"width":570,"height":400},
		{"id":"cfa5507924a9a260","type":"text","text":"### 反射\nClass 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类:\n- **Field** : 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\n- **Method** : 可以使用 invoke() 方法调用与 Method 对象关联的方法；\n- **Constructor** : 可以用 Constructor 创建新的对象。","x":-960,"y":-960,"width":605,"height":240},
		{"id":"1c426c00afb2b797","type":"text","text":"### 元注解\n1. @Target：描述注解的使用范围\n2. @Retention：描述注解保留的时间范围\n    SOURCE,    // 源文件保留\n    CLASS,       // 编译期保留，默认值\n    RUNTIME   // 运行期保留，可通过反射去获取注解信息\n3. @Inherited：被它修饰的Annotation将具有继承性。","x":380,"y":260,"width":540,"height":180},
		{"id":"5bcb2fb166b07638","type":"text","text":"### AOP\n`@Aspect` 是 AspectJ 框架和 Spring AOP（Aspect-Oriented Programming，面向切面编程）中的一个核心注解，用于定义一个切面（Aspect）。在面向切面编程中，切面是一个跨越多个类的关注点（cross-cutting concern）的模块化。通过使用切面，你可以在不修改现有类的情况下，向多个类添加额外的行为。","x":980,"y":260,"width":506,"height":184},
		{"id":"5a1e939f229d5bb7","type":"text","text":"### 异常\nThrowable 可以用来表示任何可以作为异常抛出的类，分为两种: **Error** 和 **Exception**。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种:\n- **受检异常** : 需要用 try...catch... 语句捕获并进行处理，并且可以从异常中恢复；\n- **非受检异常** : 是程序运行时错误，程序崩溃并且无法恢复。运行时异常（RuntimeException与其子类）和错误（Error）。\n***！！！！得想明白什么时候用可查异常和不可查异常 -> 是否可从异常中恢复！！！***","x":-1022,"y":-660,"width":729,"height":260},
		{"id":"4e461ac0c9a97ea3","type":"text","text":"用堆栈来解释java的参数传递：值传递\n```plaintext\n(栈)                              (堆)\n\noriginalDog -----> [Dog对象] (\"Original Dog\")\n                        |\n                        +-----> name: \"Original Dog\"\n\nchangeDog方法内：\ndog -----> [Dog对象] (\"Original Dog\")  (在调用开始时)\n                       |\n                       +-----> name: \"Original Dog\"\n\ndog -----> [新的Dog对象] (\"New Dog\")  (在调用new Dog(\"New Dog\")后)\n                        |\n                        +-----> name: \"New Dog\"\n\n(changeDog方法结束后，dog引用被销毁)\n\noriginalDog仍然指向原始的[Dog对象] (\"Original Dog\")\n```","x":-960,"y":-340,"width":660,"height":260},
		{"id":"7cfdab75ad0e8b95","type":"text","text":"### [异常的最佳实践](https://pdai.tech/md/java/basic/java-basic-x-exception.html#异常实践)\n\nJava标准异常中有几个是经常被使用的异常：\n\n| 异常                              | 使用场合                  |\n| ------------------------------- | --------------------- |\n| IllegalArgumentException        | 参数的值不合适               |\n| IllegalStateException           | 参数的状态不合适              |\n| NullPointerException            | 在null被禁止的情况下参数值为null  |\n| IndexOutOfBoundsException       | 下标越界                  |\n| ConcurrentModificationException | 在禁止并发修改的情况下，对象检测到并发修改 |\n| UnsupportedOperationException   | 对象不支持客户请求的方法          |\n\n","x":-1680,"y":-560,"width":481,"height":260},
		{"id":"f2e5e8d65a2f7436","x":-1460,"y":-740,"width":220,"height":130,"color":"2","type":"text","text":"## [JVM是如何处理异常机制的](https://pdai.tech/md/java/basic/java-basic-x-exception.html#深入理解异常)"}
	],
	"edges":[
		{"id":"ebbe4f38fe01c03d","fromNode":"685c835c0ee75a1f","fromSide":"bottom","toNode":"c991f3a08f51b38c","toSide":"top"},
		{"id":"c52679f5b63437fb","fromNode":"685c835c0ee75a1f","fromSide":"right","toNode":"1921ba466f613ee9","toSide":"left"},
		{"id":"9f52bf54e1e5a11f","fromNode":"685c835c0ee75a1f","fromSide":"top","toNode":"acf9799a8e190c10","toSide":"bottom"},
		{"id":"71332f8f3db7e895","fromNode":"685c835c0ee75a1f","fromSide":"left","toNode":"5a1e939f229d5bb7","toSide":"right"},
		{"id":"a16917ce3924ea13","fromNode":"685c835c0ee75a1f","fromSide":"top","toNode":"cfa5507924a9a260","toSide":"right"},
		{"id":"fb26f35ad7118268","fromNode":"685c835c0ee75a1f","fromSide":"top","toNode":"da6a277add5cd610","toSide":"bottom"},
		{"id":"4156451fc1629334","fromNode":"685c835c0ee75a1f","fromSide":"bottom","toNode":"4e461ac0c9a97ea3","toSide":"right"},
		{"id":"850715ecee08d5f2","fromNode":"685c835c0ee75a1f","fromSide":"bottom","toNode":"ff66d39fc32f52c6","toSide":"top"},
		{"id":"8534f4bbcf955d7f","fromNode":"ff66d39fc32f52c6","fromSide":"bottom","toNode":"1c426c00afb2b797","toSide":"top"},
		{"id":"8d873dd1168ab2a1","fromNode":"ff66d39fc32f52c6","fromSide":"bottom","toNode":"5bcb2fb166b07638","toSide":"top"},
		{"id":"fd4876b90bf370a3","fromNode":"5a1e939f229d5bb7","fromSide":"left","toNode":"7cfdab75ad0e8b95","toSide":"right"},
		{"id":"77ba3f0f799b4458","fromNode":"5a1e939f229d5bb7","fromSide":"left","toNode":"f2e5e8d65a2f7436","toSide":"right"}
	]
}